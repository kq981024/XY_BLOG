import{_ as n,o as s,c as a,a as t}from"./app-BGYiCm6m.js";const p={},o=t(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>​ <code>Pinia</code>西班牙语直译为菠萝，正如菠萝一样，在 Pinia 中的每个<code>Store</code>都是单独存在的，Store 之间也可以互相访问调用数据，实现全局的状态管理。比起  <code>Vuex</code>，Pinia 提供更简单的 Api，更少的规范以及支持 TS 和组合式 Api 风格。</p><h2 id="与vuex差异" tabindex="-1"><a class="header-anchor" href="#与vuex差异"><span>与Vuex差异</span></a></h2><ul><li>mutations  不复存在。只有 state 、getters 、actions。</li><li>actions 中支持同步和异步方法修改 state 状态。</li><li>与 TypeScript 一起使用具有可靠的类型推断支持。</li><li>不再有模块嵌套，只有 Store 的概念，Store 之间可以相互调用。</li><li>支持插件扩展，可以非常方便实现本地存储等功能。</li><li>更加轻量，压缩后体积只有 2kb 左右。</li></ul><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2><pre><code>pnpm pinia
</code></pre><h2 id="引入" tabindex="-1"><a class="header-anchor" href="#引入"><span>引入</span></a></h2><pre><code class="language-ts"><span class="token comment">// src/main.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createPinia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;pinia&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> pinia <span class="token operator">=</span> <span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>pinia<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h2><ul><li><h5 id="定义-store" tabindex="-1"><a class="header-anchor" href="#定义-store"><span>定义 Store</span></a></h5></li></ul><pre><code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> useCounterStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;storeId&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
    <span class="token comment">// store变量</span>
       count<span class="token operator">:</span><span class="token number">0</span>
   <span class="token punctuation">)</span><span class="token punctuation">,</span>
  getters<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// store计算属性</span>
    countPlus<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
  actions<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// store对变量的方法</span>
    <span class="token keyword">const</span> <span class="token function-variable function">addCount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        count<span class="token operator">++</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><ul><li><h5 id="解构-store-直接结构会失去响应式-所以使用-storetorefs-进行解构" tabindex="-1"><a class="header-anchor" href="#解构-store-直接结构会失去响应式-所以使用-storetorefs-进行解构"><span>解构 Store:   直接结构会失去响应式，所以使用 storeToRefs()进行解构</span></a></h5></li></ul><pre><code class="language-ts"><span class="token keyword">const</span> counterStore <span class="token operator">=</span> <span class="token function">useCounterStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> count <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">storeToRefs</span><span class="token punctuation">(</span>counterStore<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><ul><li><h5 id="修改-store-patch-cbk-store" tabindex="-1"><a class="header-anchor" href="#修改-store-patch-cbk-store"><span>修改 Store：$patch(cbk(store))</span></a></h5></li></ul><pre><code class="language-ts"><span class="token comment">// 直接修改</span>
<span class="token keyword">const</span> counterStore <span class="token operator">=</span> <span class="token function">useCounterStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
counterStore<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token comment">// 调用action方法修改</span>
counterStore<span class="token punctuation">.</span><span class="token function">countPlus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// $patch修改   性能更好优先使用</span>
couterStore<span class="token punctuation">.</span><span class="token function">$patch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  store<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><ul><li><h5 id="监听-store-subscribe-cbk-mutation-state" tabindex="-1"><a class="header-anchor" href="#监听-store-subscribe-cbk-mutation-state"><span>监听 Store：$subscribe(cbk(mutation,state))</span></a></h5></li></ul><pre><code class="language-ts"><span class="token keyword">const</span> counterStore <span class="token operator">=</span> <span class="token function">useCounterStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
counterStore<span class="token punctuation">.</span><span class="token function">$subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mutation<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 每当状态发生变化时，将 state 持久化到本地存储</span>
  localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&quot;counter&quot;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><ul><li><h5 id="重置-store-reset" tabindex="-1"><a class="header-anchor" href="#重置-store-reset"><span>重置 Store：$reset()</span></a></h5></li></ul><pre><code class="language-ts"><span class="token keyword">const</span> counterStore <span class="token operator">=</span> <span class="token function">useCounterStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
counterStore<span class="token punctuation">.</span><span class="token function">$reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h2 id="插件" tabindex="-1"><a class="header-anchor" href="#插件"><span>插件</span></a></h2><ul><li><h5 id="实现本地存储-pinia-plugin-persist" tabindex="-1"><a class="header-anchor" href="#实现本地存储-pinia-plugin-persist"><span>实现本地存储：pinia-plugin-persist</span></a></h5></li></ul><pre><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">const</span> useCounterStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;conter&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// 开启数据缓存</span>
  persist<span class="token operator">:</span> <span class="token punctuation">{</span>
    enabled<span class="token operator">:</span> <span class="token boolean">true</span>
    strategies<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          key<span class="token operator">:</span> <span class="token string">&#39;myCounter&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 存储的 key 值，默认为 storeId</span>
          storage<span class="token operator">:</span> localStorage<span class="token punctuation">,</span> <span class="token comment">// 存储的位置，默认为 sessionStorage</span>
          paths<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 需要存储的 state 状态，默认存储所有的状态</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
     <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>`,22),e=[o];function c(u,l){return s(),a("div",null,e)}const r=n(p,[["render",c],["__file","Piniakuaisushibie.html.vue"]]),k=JSON.parse('{"path":"/blogs/Vue/Piniakuaisushibie.html","title":"pinia快速识别","lang":"en-US","frontmatter":{"title":"pinia快速识别","date":"2023-02-15T00:00:00.000Z","tags":["Pinia"],"categories":["Vue"]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"与Vuex差异","slug":"与vuex差异","link":"#与vuex差异","children":[]},{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"引入","slug":"引入","link":"#引入","children":[]},{"level":2,"title":"方法","slug":"方法","link":"#方法","children":[]},{"level":2,"title":"插件","slug":"插件","link":"#插件","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"filePathRelative":"blogs/Vue/Pinia快速识别.md"}');export{r as comp,k as data};
