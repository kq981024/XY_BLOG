import{_ as n,o as s,c as a,a as t}from"./app-BGYiCm6m.js";const p={},o=t(`<pre><code>title: Reflect快速识别
date: 2023-08-15
tags:
    - JavaScript
categories:
    - JavaScript
</code></pre><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>​ Reflect是JS中的一个内置对象，是对对象的操作。可以理解为是Object对象操作的一个补充，因为Object对象自身也有好用的方法。但随着ES6的变迁，很多Object对象的内置方法已经渐渐被Reflect所取代。所以Reflect很像Object，但和Proxy搭配使用，Reflect是非常适配的。</p><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h2><ul><li><p>Reflect.get：<strong>查找对象中属性的值</strong>，这个方法接收三个参数，第一个为目标对象，第二个为要查找的key，第三个可以理解为this指向（默认为目标对象，可选），返回所查找到的值，如果没有，则返回<code>undefined</code>。就是对象中的<code>.</code>属性</p><pre><code class="language-js"><span class="token comment">//这个方法可以理解为是getter方法，比较简单，也好理解，只是查找一个对象中是否有这个属性</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;心野&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//这里第三个参数写不写都一样，可写可不写</span>
<span class="token keyword">const</span> ref <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//24</span>
<span class="token keyword">const</span> reft <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;tel&quot;</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reft<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//undefined</span>
</code></pre></li><li><p>Reflect.set：<strong>修改对象中属性的值</strong>，接收四个参数，第一个为目标对象（也可以是数组），第二个要修改的key，第三个要修改的值，第四个可以理解为this指向（默认为目标对象，可选）返回布尔值判断是否修改成功</p><pre><code class="language-js"><span class="token comment">//这个方法可以理解为是setter方法，修改对象中属性的值，没有就新增，有就修改</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;心野&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ref <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ref1 <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;tel&quot;</span><span class="token punctuation">,</span> <span class="token number">138338</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span>ref1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//18</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>tel<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//138338</span>

<span class="token comment">//对数组修改</span>
<span class="token keyword">const</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token comment">//如果目标对象是一个数组，第二个传的就是索引</span>
<span class="token keyword">const</span> ref <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//18</span>

<span class="token comment">//现在对数据进行劫持一下</span>
<span class="token keyword">const</span> new_obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
<span class="token comment">//是否可更改</span>
  <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//这种情况下就修改失败了</span>
<span class="token keyword">const</span> ref <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>new_obj<span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>new_obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//24</span>
</code></pre></li><li><p>Reflect.has：<strong>查找对象中是否存在某一个值</strong>，与in操作符一致，接收三个参数，第一个为目标对象，第二个是查找的key，第三个可以理解为this指向（默认为目标对象，可选，返回一个布尔值判断是否可以被in操作符查找到</p><pre><code class="language-js"><span class="token comment">//与in操作符相同</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;iceCode&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ref <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ref1 <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;tel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> ref1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true false</span>
</code></pre></li><li><p>Reflect.apply：<strong>这里可以理解为改变this指向的一个方法等同于<code>Function.prototype.apply()</code>，接收三个参数，第一个是目标函数，第二个是this指向的对象，第三个参数列表，应为数组，返回值是调用完带着指定参数和 this 值的给定的函数后返回的结果</strong></p></li><li><p>Reflect.ownKeys：返回一个数组，包含目标对象所有的key，包括不可遍历的key</p></li><li><p>Reflect.deleteProperty：<strong>用于删除对象中的属性</strong>，接收两个参数，第一个为目标对象，第二个为要删除key等同于<code>delete obj.key</code></p></li><li><p>Reflect.definProperty：此方法与<code>Object.definProperty</code>的作用一样，唯一不同的就是它返回一个布尔值，而<code>Object.definProperty</code>返回的是一个劫持之后的对象</p></li><li><p>Reflect.getOwnPropertyDescriptor：<strong>返回给定属性的描述</strong>，类似Object.getOwnPropertyDescriptor</p></li><li><p>Reflect.getPrototypeOf：<strong>返回对象的原型</strong>，与<code>Object.getPropotypeOf</code>是一致的，只有在个别情况下两者的返回结果会有不同，接收一个参数，目标对象</p></li><li><p>Reflect.setPrototypeOf：<strong>设置对象的原型</strong>，接收两个参数，第一个是目标对象（设置原型的对象），第二个为对象的原型对象（类型必须是对象或null，否则报错），返回一个布尔值，表明原型是否被设置成功。与<code>Object.setPrototypeOf</code>一致，只有返回值不同</p></li><li><p>Reflect.preventExtensions：<strong>阻止对象扩展（禁止添加新的属性）</strong>，接收一个参数，目标对象，返回一个布尔值，表明是否设置成不可被扩展成功。 <code>Object.preventExtensions</code>类似，唯一的差别是<code>Object.preventExtensions</code>接受的目标对象如果不是对象类型则会强制转换成对象类型，而<code>Reflect.preventExtensions</code>则会报错</p></li><li><p>Reflect.isExtensible：<strong>判断一个对象是否可扩展（即是否能添加属性）</strong>，接收一个参数，目标对象，返回一个布尔值。与<code>Object.isExtensible</code>类似，唯一的差别是<code>Object.isExtensible</code>接受的目标对象如果不是对象类型则会强制转换成对象类型，而<code>Reflect.isExtensible</code>则会报错</p></li><li><p>Reflect.construct：<strong>类似于new操作符创建一个构造函数</strong>，接收三个参数，第一个构造函数，第二个为参数列表（数组），第三个参数为this指向（可选），返回值是传入的构造函数（或第三个参数的this指向）实例化的实例对象</p></li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>​ 一般情况下，很少单独使用<code>Reflect</code>中的一些方法，但是如果要使用构造函数<code>Proxy</code>的时候，就可以大胆为所欲为的使用了，因为相同的方法名，相同的参数，可以不用知道<code>Proxy</code>的各个属性需要<code>return</code>什么的参数，直接return<code> Reflect</code>对象的相同参数就可以了，记住了<code>Reflect</code>的方法即使用也就记住了<code>Proxy</code>的方法，只要玩懂了<code>Reflect</code>也可以轻松玩转<code>Proxy</code></p>`,7),e=[o];function c(l,u){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","Reflectkuaisushibie.html.vue"]]),r=JSON.parse('{"path":"/blogs/JavaScript/Reflectkuaisushibie.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"方法","slug":"方法","link":"#方法","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1717677053000,"updatedTime":1717677053000,"contributors":[{"name":"wkq","email":"444296534@qq.com","commits":1}]},"filePathRelative":"blogs/JavaScript/Reflect快速识别.md"}');export{k as comp,r as data};
