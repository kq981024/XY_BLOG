import{_ as n,o as s,c as a,a as p}from"./app-BGYiCm6m.js";const t={},o=p(`<h2 id="关于原型和原型链" tabindex="-1"><a class="header-anchor" href="#关于原型和原型链"><span>关于原型和原型链</span></a></h2><ul><li><h4 id="原型" tabindex="-1"><a class="header-anchor" href="#原型"><span>原型</span></a></h4></li></ul><p>​ 每个函数定义时自动添加prototype属性,默认指向原型对象(空的object)</p><p>​ 原型对象中有个属性constructor，指向函数对象</p><pre><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Date<span class="token punctuation">)</span>		<span class="token comment">//true</span>
</code></pre><p>​ 可以给原型对象添加属性(方法)</p><p>​ 每个对象创建时自动添加 <strong><strong><strong>proto</strong></strong></strong> 属性,默认值为构造函数的prototype属性值</p><pre><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype<span class="token operator">===</span>fn<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">//true</span>
</code></pre><ul><li><h4 id="原型链" tabindex="-1"><a class="header-anchor" href="#原型链"><span>原型链</span></a></h4></li></ul><p>​ 对象要使用某个属性或方法，会现在自身寻找→原型对象中寻找→原型对象的原型中寻找......直到object对象（object对象没有原型）</p><ul><li><h4 id="原型继承" tabindex="-1"><a class="header-anchor" href="#原型继承"><span>原型继承</span></a></h4></li></ul><p>​ 构造函数的实例对象自动拥有构造函数原型对象的属性和方法,利用的就是原型链 ，实例的隐式原型等于构造的显示原型 二者指向同一个原型对象(空的object) ，如果显示原型重新指向,会断开之前指向的原型对象，指向新的原型对象。而隐式原型对象依然指向之前的原型对象，不会随着显示原型的重新指向而改变指向。</p><h2 id="this的情况" tabindex="-1"><a class="header-anchor" href="#this的情况"><span>this的情况</span></a></h2><ul><li><h4 id="隐式绑定" tabindex="-1"><a class="header-anchor" href="#隐式绑定"><span><strong>隐式绑定</strong></span></a></h4></li></ul><p>​ 函数调用时前面并未指定任何对象，这种情况下this指向全局对象window</p><pre><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token function-variable function">fn2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//window</span>
        <span class="token function">fn3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//window</span>
    <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">fn3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//window</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>​ 如果函数调用时，前面存在调用它的对象，那么this就会隐式绑定到这个对象上，若存在多个对象，则遵循就近原则</p><pre><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;安卓&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">func</span><span class="token operator">:</span> fn<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;IOS&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">o</span><span class="token operator">:</span> obj
<span class="token punctuation">}</span><span class="token punctuation">;</span>
obj1<span class="token punctuation">.</span>o<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">// 安卓</span>
</code></pre><ul><li><h4 id="隐式丢失" tabindex="-1"><a class="header-anchor" href="#隐式丢失"><span><strong>隐式丢失</strong></span></a></h4></li></ul><p>​ 在特定情况下会存在隐式绑定丢失的问题，最常见的就是作为参数传递以及变量赋值</p><pre><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;安卓&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;IOS&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">param</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">fn1</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 安卓</span>
<span class="token comment">// obj.fn 也就是一个函数传递进 fn1 中执行，单纯传递了一个函数而已，this并没有跟函数绑在一起，所以this丢失这里指向了window。</span>
</code></pre><pre><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;安卓&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;IOS&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> fn1 <span class="token operator">=</span> obj<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>
<span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token comment">// 安卓</span>
</code></pre><ul><li><h4 id="显式绑定-通过call、apply以及bind方法改变this的行为" tabindex="-1"><a class="header-anchor" href="#显式绑定-通过call、apply以及bind方法改变this的行为"><span><strong>显式绑定</strong>（通过call、apply以及bind方法改变this的行为）</span></a></h4></li></ul><p>​ call与apply让函数从被动变主动，函数能主动选择自己的上下文，以此方法改变this指向时，指向参数提供的是null或者undefined，那么 this 将指向全局对象。</p><pre><code class="language-javascript"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;安卓&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;IOS&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;鸿蒙&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 安卓</span>
<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// IOS</span>
<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 鸿蒙</span>
<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 鸿蒙</span>
<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 鸿蒙</span>
</code></pre><ul><li><h4 id="call、apply与bind的区别" tabindex="-1"><a class="header-anchor" href="#call、apply与bind的区别"><span><strong>call、apply与bind的区别</strong></span></a></h4><ul><li><p>call、apply与bind都用于改变this绑定，但call、apply在改变this指向的同时还会执行函数，而bind在改变this后是返回一个全新的boundFcuntion绑定函数，这也是为什么上方例子中bind后还加了一对括号 ()的原因。</p></li><li><p>bind属于硬绑定，返回的 boundFunction 的 this 指向无法再次通过bind、apply或 call 修改；call与apply的绑定只适用当前调用，调用完就没了，下次要用还得再次绑</p><pre><code class="language-js"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;安卓&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;IOS&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;鸿蒙&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token comment">// 安卓</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 鸿蒙</span>
<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// IOS</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 鸿蒙</span>
<span class="token keyword">let</span> boundFn <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 安卓</span>
<span class="token function">boundFn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 安卓</span>
<span class="token function">boundFn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 安卓</span>
<span class="token function">boundFn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 安卓</span>
</code></pre></li><li><p>call与apply功能完全相同，唯一不同的是call方法传递函数调用形参是以散列形式，而apply方法的形参是一个数组。在传参的情况下，call的性能要高于apply，因为apply在执行时还要多一步解析数组。</p><pre><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;乔布斯&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">system<span class="token punctuation">,</span>brand</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">开发了</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>brand<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">手机，属于</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>system<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">系统</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">&#39;IOS&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;苹果&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//乔布斯开发了苹果系统，属于IOS系统</span>
<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&#39;IOS&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;苹果&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//乔布斯开发了苹果系统，属于IOS系统</span>
</code></pre></li></ul></li></ul><h2 id="new绑定" tabindex="-1"><a class="header-anchor" href="#new绑定"><span><strong>new绑定</strong></span></a></h2><p>​ <em>new</em> 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例，会进行如下的操作： 步骤 <em>1</em>：创建一个空的简单 <em>JavaScript</em> 对象，即 { } ; ​ 步骤 <em>2</em>：链接该对象到另一个对象（即设置该对象的原型对象）； 步骤 <em>3</em>：将步骤 <em>1</em> 新创建的对象作为 <em>this</em> 的上下文； 步骤 <em>4</em>：如果该函数没有返回对象，则返回 <em>this</em>。</p><pre><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;乔布斯&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> echo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>echo<span class="token punctuation">.</span>name<span class="token punctuation">)</span>	<span class="token comment">// 乔布斯</span>
</code></pre><h2 id="this的绑定优先级" tabindex="-1"><a class="header-anchor" href="#this的绑定优先级"><span><strong>this的绑定优先级</strong></span></a></h2><pre><code class="language-tex">显式绑定 &gt; 隐式绑定 &gt; 默认绑定

new绑定 &gt; 隐式绑定 &gt; 默认绑定
</code></pre><h2 id="箭头函数的this" tabindex="-1"><a class="header-anchor" href="#箭头函数的this"><span><strong>箭头函数的this</strong></span></a></h2><p>​ 箭头函数中没有this，箭头函数的this指向取决于外层作用域中的this，外层作用域或函数的this指向谁，箭头函数中的this便指向谁。一旦箭头函数的this绑定成功，也无法被再次修改，可以通过修改箭头函数的外层作用域达到修改箭头函数的this</p><pre><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;乔布斯&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;库克&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//  乔布斯</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Obj2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>	<span class="token comment">// 库克</span>
</code></pre><h2 id="事件对象" tabindex="-1"><a class="header-anchor" href="#事件对象"><span>事件对象</span></a></h2><p>​ 当事件的响应函数被触发时,浏览器每次都会将一个事件对象作为实参event传递进响应函数</p><pre><code class="language-js">event <span class="token operator">=</span> event<span class="token operator">||</span>window<span class="token punctuation">.</span>event        <span class="token comment">// 事件参数的兼容</span>
</code></pre><h2 id="事件冒泡" tabindex="-1"><a class="header-anchor" href="#事件冒泡"><span>事件冒泡</span></a></h2><p>​ 即事件的向上传导，当底层元素的事件被触发时，其上层元素的<strong>相同事件</strong>也会被触发</p><h2 id="取消事件冒泡" tabindex="-1"><a class="header-anchor" href="#取消事件冒泡"><span>取消事件冒泡</span></a></h2><pre><code>event.cancelBubble = true
</code></pre><h2 id="事件委派" tabindex="-1"><a class="header-anchor" href="#事件委派"><span>事件委派</span></a></h2><p>​ 多个底层元素包括后添加的元素需要执行相同事件，将事件绑定到上层元素，底层通过冒泡触发上层元素绑定的事件</p><p>​ 上层元素可以通过event.target.className==&#39;name&#39;接受期望元素绑定，其余不绑定。尽量减少绑定次数，提高程序性能</p><h2 id="事件循环机制" tabindex="-1"><a class="header-anchor" href="#事件循环机制"><span>事件循环机制</span></a></h2><p>​ 在 <em>js</em> 中任务会分为同步任务和异步任务。</p><p>​ 如果是同步任务，则会在主线程（也就是 <em>js</em> 引擎线程）上进行执行，形成一个执行栈。但是一旦遇到异步任务，则会将这些异步任务交给异步模块去处理，然后主线程继续执行后面的同步代码。</p><p>​ 当异步任务有了运行结果以后，就会在任务队列里面放置一个事件，这个任务队列由事件触发线程来进行管理。</p><p>​ 一旦执行栈中所有的同步任务执行完毕，就代表着当前的主线程（<em>js</em> 引擎线程）空闲了，系统就会读取任务队列，将可以运行的异步任务添加到执行栈中，开始执行。</p><p>​ 在 <em>js</em> 中，任务队列中的任务又可以被分为 <em>2</em> 种类型：宏任务（<em>macrotask</em>）与微任务（<em>microtask</em>）</p><p>​ 宏任务可以理解为每次执行栈所执行的代码就是一个宏任务，包括每次从事件队列中获取一个事件回调并放到执行栈中所执行的任务。</p><p>​ 微任务可以理解为当前宏任务执行结束后立即执行的任务。</p><h2 id="node中的事件循环" tabindex="-1"><a class="header-anchor" href="#node中的事件循环"><span>Node中的事件循环</span></a></h2><p><em>Node.JS</em> 的事件循环分为 <em>6</em> 个阶段：</p><ul><li><em>timers</em> 阶段：这个阶段执行 <em>timer</em>（ <em>setTimeout、setInterval</em> ）的回调</li><li><em>I/O callbacks</em> 阶段：处理一些上一轮循环中的少数未执行的 <em>I/O</em> 回调</li><li><em>idle、prepare</em> 阶段：仅 <em>Node.js</em> 内部使用</li><li><em>poll</em> 阶段：获取新的 <em>I/O</em> 事件, 适当的条件下 <em>Node.js</em> 将阻塞在这里</li><li><em>check</em> 阶段：执行 <em>setImmediate( )</em> 的回调</li><li><em>close callbacks</em> 阶段：执行</li></ul><h2 id="数据-堆数据-内存-变量-栈索引" tabindex="-1"><a class="header-anchor" href="#数据-堆数据-内存-变量-栈索引"><span>数据(堆数据)|内存|变量(栈索引)</span></a></h2><ul><li>数据是存储在内存代表特定信息的东东 ；例如:var a = &#39;基本数据/对象|方法/变量&#39; a保存的是数据/对象|方法地址/变量内存内容</li><li>内存是内存条通电后产生的可存储数据的空间 ，物理断电后空间和数据都消失</li><li>变量=变量名+变量值 对应一块小内存 变量名用来查找对应的内存 变量值就是内存中保存的数据</li></ul><h2 id="回调函数" tabindex="-1"><a class="header-anchor" href="#回调函数"><span>回调函数</span></a></h2><p>定义了 没有调用 最终执行了</p><h4 id="iife-函数立即执行表达式-匿名函数自调用" tabindex="-1"><a class="header-anchor" href="#iife-函数立即执行表达式-匿名函数自调用"><span>IIFE 函数立即执行表达式|匿名函数自调用</span></a></h4><p>作用:隐藏实现，不会污染外部命名空间 可以暴露方法</p><pre><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;text/javascript&quot;</span><span class="token operator">&gt;</span>
    <span class="token comment">// 函数自调用</span>
      <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> a <span class="token operator">=</span><span class="token number">3</span> 
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//3 </span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">4</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//4</span>
      
      <span class="token comment">// ;使得不会认为是整体</span>
      <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> a <span class="token operator">=</span><span class="token number">1</span>
        <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        window<span class="token punctuation">.</span><span class="token function-variable function">$</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">test</span><span class="token operator">:</span>test       <span class="token comment">//返回对象 对外暴露test方法</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       <span class="token function">$</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><h2 id="变量与函数提升" tabindex="-1"><a class="header-anchor" href="#变量与函数提升"><span>变量与函数提升</span></a></h2><p>先执行变量提升再执行函数提升</p><ul><li>变量提升</li></ul><pre><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span><span class="token number">4</span>
<span class="token punctuation">}</span>

<span class="token comment">//　fn1 等价于 fn2</span>
    
<span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">var</span> a
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
 a <span class="token operator">=</span> <span class="token number">4</span>
<span class="token punctuation">}</span>
  
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">//undefined</span>
</code></pre><ul><li>函数提升</li></ul><pre><code class="language-javascript"><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">//  fn()函数提升			</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fn()&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="执行上下文" tabindex="-1"><a class="header-anchor" href="#执行上下文"><span>执行上下文</span></a></h2><p>​ 即当前代码运行环境，执行代码需要哪些数据提前准备好再开始执行</p><h2 id="作用域和作用域链" tabindex="-1"><a class="header-anchor" href="#作用域和作用域链"><span>作用域和作用域链</span></a></h2><p>​ 作用域只能向外查找,不能向内查找。当需要某个属性时，向外找最近的上层作用域里的同名属性</p><pre><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;text/javascript&quot;</span><span class="token operator">&gt;</span>
      <span class="token keyword">var</span> a <span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">20</span>
      <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">300</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fn()&#39;</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token keyword">var</span> a <span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token number">400</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bar()&#39;</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">bar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>      <span class="token comment">//1000,20,300,400,100</span>
        <span class="token function">bar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>      <span class="token comment">//1000,20,300,400,200</span>
      <span class="token punctuation">}</span>
      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>      <span class="token comment">//100,20,300,10</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><p>​ 函数调用函数的情况下,考虑被调用函数的作用域向外</p><pre><code class="language-javascript"> <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;text/javascript&quot;</span><span class="token operator">&gt;</span>
      <span class="token keyword">var</span> x <span class="token operator">=</span><span class="token number">10</span>
      <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> x <span class="token operator">=</span><span class="token number">20</span>
        <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token function">show</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>			<span class="token comment">//10</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><p>​ 对象属性名 不包括在函数作用域内</p><pre><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;text/javascript&quot;</span><span class="token operator">&gt;</span>
      <span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">//fn()</span>
      <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">fn2</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn2<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
      obj<span class="token punctuation">.</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//错误   函数内部作用域并没有fn2</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><h2 id="函数闭包" tabindex="-1"><a class="header-anchor" href="#函数闭包"><span>函数闭包</span></a></h2><p>​ 闭包定义：一个函数和对其周围状态的引用捆绑在一起（或者说函数被引用包围），这样的组合就是<strong>闭包</strong>（<em>closure</em>）。也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域。在 <em>JavaScript</em> 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。</p><ul><li>嵌套情况下 内部函数引用了外部函数或变量时 ，产生闭包</li><li>将函数作为另一个函数的返回值 产生闭包</li><li>将函数作为实参传递给另一个函数调用 产生闭包</li></ul><pre><code class="language-javascript">  <span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>按钮一<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>按钮二<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>按钮三<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;text/javascript&quot;</span><span class="token operator">&gt;</span>
      <span class="token keyword">var</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>length <span class="token operator">=</span>btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;第&#39;</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&#39;按钮被按了&#39;</span><span class="token punctuation">)</span>      <span class="token comment">//捕获i i在function之外</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
</code></pre><h2 id="闭包作用" tabindex="-1"><a class="header-anchor" href="#闭包作用"><span>闭包作用</span></a></h2><ul><li>匿名自执行函数</li><li>结果缓存</li><li>封装</li><li>实现类和继承</li></ul><p>​ 使用函数内部的变量在函数执行完后，仍然存活在内存中(延长局部变量的生命周期</p><p>让函数外部可以操作到函数内部(局部变量)的数据</p><h2 id="闭包的生命周期" tabindex="-1"><a class="header-anchor" href="#闭包的生命周期"><span>闭包的生命周期</span></a></h2><p>​ 产生：嵌套内部函数定义完成后产生</p><p>​ 死亡：包含闭包的函数对象成为垃圾对象时</p><h2 id="内存泄露" tabindex="-1"><a class="header-anchor" href="#内存泄露"><span>内存泄露</span></a></h2><p>​ 内存泄漏（<em>Memory Leak</em>）是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</p><ul><li>函数执行完后,函数内的局部变量没有释放,占用内存时间会变长 解决:及时释放</li><li>内存泄露多了就会导致内存溢出</li><li>意外的全局变量/定时器没有清理/闭包都会导致内存泄露</li></ul><h2 id="内存溢出" tabindex="-1"><a class="header-anchor" href="#内存溢出"><span>内存溢出</span></a></h2><p>​ 当程序运行需要的内存超过了剩余的内存,就会抛出内存溢出的错误</p><h2 id="weakmap和weakset" tabindex="-1"><a class="header-anchor" href="#weakmap和weakset"><span>weakmap和weakset</span></a></h2><ul><li>WeakSet* 对象是一些对象值的集合, 并且其中的每个对象值都只能出现一次。在 <em>WeakSet</em> 的集合中是唯一的</li><li>与 <em>Set</em> 相比，<em>WeakSet</em> 只能是<strong>对象的集合</strong>，而不能是任何类型的任意值。</li><li><em>WeakSet</em> 持弱引用：集合中对象的引用为弱引用。 如果没有其他的对 <em>WeakSet</em> 中对象的引用，那么这些对象会被当成垃圾回收掉。 这也意味着 <em>WeakSet</em> 中没有存储当前对象的列表。 正因为这样，<em>WeakSet</em> 是不可枚举的。</li></ul><p><em>WeakMap</em> 对象也是键值对的集合。它的<strong>键必须是对象类型</strong>，值可以是任意类型。它的键被弱保持，也就是说，当其键所指对象没有其他地方引用的时候，它会被 <em>GC</em> 回收掉。<em>WeakMap</em> 提供的接口与 <em>Map</em> 相同。</p><p>与 <em>Map</em> 对象不同的是，<em>WeakMap</em> 的键是不可枚举的。不提供列出其键的方法。列表是否存在取决于垃圾回收器的状态，是不可预知的。</p><h2 id="如何编写高性能的-javascript" tabindex="-1"><a class="header-anchor" href="#如何编写高性能的-javascript"><span>如何编写高性能的 <em>JavaScript</em>？</span></a></h2><ul><li>遵循严格模式：&quot;use strict&quot;</li><li>将 <em>JavaScript</em> 本放在页面底部，加快渲染页面</li><li>将 <em>JavaScript</em> 脚本将脚本成组打包，减少请求</li><li>使用非阻塞方式下载 <em>JavaScript</em> 脚本</li><li>尽量使用局部变量来保存全局变量</li><li>尽量减少使用闭包</li><li>使用 <em>window</em> 对象属性方法时，省略 <em>window</em></li><li>尽量减少对象成员嵌套</li><li>缓存 <em>DOM</em> 节点的访问</li><li>通过避免使用 <em>eval()</em> 和 <em>Function()</em> 构造器</li><li>给 <em>setTimeout()</em> 和 <em>setInterval()</em> 传递函数而不是字符串作为参数</li><li>尽量使用直接量创建对象和数组</li><li>最小化重绘 (<em>repaint</em>) 和回流 (<em>reflow</em>)</li></ul><h2 id="理解纯函数" tabindex="-1"><a class="header-anchor" href="#理解纯函数"><span>理解纯函数</span></a></h2><ul><li>只负责自己的任务，不会更改在函数调用前就已存在的对象或变量</li><li>输入相同，则输出相同。给定相同的输入，纯函数总是返回相同的结果</li></ul>`,101),e=[o];function c(l,u){return s(),a("div",null,e)}const k=n(t,[["render",c],["__file","JavaScriptkuaisushibie.html.vue"]]),r=JSON.parse('{"path":"/blogs/JavaScript/JavaScriptkuaisushibie.html","title":"JavaScript快速识别","lang":"en-US","frontmatter":{"title":"JavaScript快速识别","date":"2023-01-06T00:00:00.000Z","tags":["JavaScript"],"categories":["JavaScript"]},"headers":[{"level":2,"title":"关于原型和原型链","slug":"关于原型和原型链","link":"#关于原型和原型链","children":[]},{"level":2,"title":"this的情况","slug":"this的情况","link":"#this的情况","children":[]},{"level":2,"title":"new绑定","slug":"new绑定","link":"#new绑定","children":[]},{"level":2,"title":"this的绑定优先级","slug":"this的绑定优先级","link":"#this的绑定优先级","children":[]},{"level":2,"title":"箭头函数的this","slug":"箭头函数的this","link":"#箭头函数的this","children":[]},{"level":2,"title":"事件对象","slug":"事件对象","link":"#事件对象","children":[]},{"level":2,"title":"事件冒泡","slug":"事件冒泡","link":"#事件冒泡","children":[]},{"level":2,"title":"取消事件冒泡","slug":"取消事件冒泡","link":"#取消事件冒泡","children":[]},{"level":2,"title":"事件委派","slug":"事件委派","link":"#事件委派","children":[]},{"level":2,"title":"事件循环机制","slug":"事件循环机制","link":"#事件循环机制","children":[]},{"level":2,"title":"Node中的事件循环","slug":"node中的事件循环","link":"#node中的事件循环","children":[]},{"level":2,"title":"数据(堆数据)|内存|变量(栈索引)","slug":"数据-堆数据-内存-变量-栈索引","link":"#数据-堆数据-内存-变量-栈索引","children":[]},{"level":2,"title":"回调函数","slug":"回调函数","link":"#回调函数","children":[]},{"level":2,"title":"变量与函数提升","slug":"变量与函数提升","link":"#变量与函数提升","children":[]},{"level":2,"title":"执行上下文","slug":"执行上下文","link":"#执行上下文","children":[]},{"level":2,"title":"作用域和作用域链","slug":"作用域和作用域链","link":"#作用域和作用域链","children":[]},{"level":2,"title":"函数闭包","slug":"函数闭包","link":"#函数闭包","children":[]},{"level":2,"title":"闭包作用","slug":"闭包作用","link":"#闭包作用","children":[]},{"level":2,"title":"闭包的生命周期","slug":"闭包的生命周期","link":"#闭包的生命周期","children":[]},{"level":2,"title":"内存泄露","slug":"内存泄露","link":"#内存泄露","children":[]},{"level":2,"title":"内存溢出","slug":"内存溢出","link":"#内存溢出","children":[]},{"level":2,"title":"weakmap和weakset","slug":"weakmap和weakset","link":"#weakmap和weakset","children":[]},{"level":2,"title":"如何编写高性能的 JavaScript？","slug":"如何编写高性能的-javascript","link":"#如何编写高性能的-javascript","children":[]},{"level":2,"title":"理解纯函数","slug":"理解纯函数","link":"#理解纯函数","children":[]}],"git":{"createdTime":1717677053000,"updatedTime":1718364603000,"contributors":[{"name":"wkq","email":"444296534@qq.com","commits":2}]},"filePathRelative":"blogs/JavaScript/JavaScript快速识别.md"}');export{k as comp,r as data};
