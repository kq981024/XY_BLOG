import{_ as n,o as s,c as a,a as t}from"./app-BGYiCm6m.js";const p={},o=t(`<h3 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h3><p>fs模块是用来操作文件的模块，提供一系列的方法和属性满足对文件的操作需求,<strong>fs的相对路径参照物是命令行的工作目录</strong>，<strong>__dirname</strong>保存的是文件所在目录的绝对路径</p><h3 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h3><h5 id="fs-readfile-path-opt-cbk-同步读取-fs-readfilesync-path-同步读取" tabindex="-1"><a class="header-anchor" href="#fs-readfile-path-opt-cbk-同步读取-fs-readfilesync-path-同步读取"><span>fs.readFile(path,opt,cbk)：同步读取 | fs.readFileSync(path）: 同步读取</span></a></h5><ul><li><p><strong>参数说明</strong> ： path：读取文件路径，opt：读取配置，cbk：读取文件回调</p></li><li><p><strong>作用</strong>：读取给定文件路径下的文件</p></li><li><p><strong>实例</strong>：</p><pre><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./文件路径.txt&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
     <span class="token comment">// err:读取失败，data：读取数据</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./同步读取.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
</code></pre></li></ul><h5 id="fs-writefile-path-data-opt-cbk-obj-异步写入-fs-writefilesync-path-data-同步写入" tabindex="-1"><a class="header-anchor" href="#fs-writefile-path-data-opt-cbk-obj-异步写入-fs-writefilesync-path-data-同步写入"><span>fs.writeFile(path,data,opt,cbk(obj))：异步写入 | fs.writeFileSync(path,data)：同步写入</span></a></h5><ul><li><p><strong>参数说明</strong>：path：文件存放路径，data:写入内容，opt:写入配置(flag:&#39;a&#39;&lt;追加加&gt;)，cbk:写入文件回调，obj：为null为成功否则为错误对象</p></li><li><p><strong>作用</strong>：写入数据到给定文件路径下的文件</p></li><li><p><strong>实例</strong>：</p><pre><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">&#39;异步写入.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;你好&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;错误----&#39;</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;同步写入.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;你好&#39;</span><span class="token punctuation">)</span>
</code></pre></li></ul><h5 id="fs-append-path-data-cbk-obj-异步追加-fs-appendsync-path-data-同步追加" tabindex="-1"><a class="header-anchor" href="#fs-append-path-data-cbk-obj-异步追加-fs-appendsync-path-data-同步追加"><span>fs.append(path,data,cbk(obj))：异步追加 | fs.appendSync(path,data)：同步追加</span></a></h5><ul><li><p><strong>参数说明</strong>：path：追加文件路径，data:追加内容，</p></li><li><p><strong>作用</strong>：追加文件内容</p></li><li><p><strong>实例</strong>：</p><pre><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">appendFile</span><span class="token punctuation">(</span><span class="token string">&#39;./同步写入.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;同步追加&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">errObj</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>errObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;追加错误----&#39;</span><span class="token punctuation">,</span> errObj<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;追加成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">appendFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./异步写入.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\\r\\n异步追加&#39;</span><span class="token punctuation">)</span>
</code></pre></li></ul><h5 id="fs-createwritestream-path-流式写入-适用于频繁写入-可减少文件开启关闭次数" tabindex="-1"><a class="header-anchor" href="#fs-createwritestream-path-流式写入-适用于频繁写入-可减少文件开启关闭次数"><span>fs.createWriteStream(path)：流式写入 适用于频繁写入 可减少文件开启关闭次数</span></a></h5><ul><li><p><strong>参数说明</strong>：path:文件路径</p></li><li><p><strong>作用</strong>：创建流式写入对象 减少文件操作次数</p></li><li><p><strong>实例</strong>：</p><pre><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> ws <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&#39;./流式写入.txt&#39;</span><span class="token punctuation">)</span>
ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;第一次写入\\r\\n&#39;</span><span class="token punctuation">)</span>
ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;第二次写入\\r\\n&#39;</span><span class="token punctuation">)</span>
ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;第三次写入\\r\\n&#39;</span><span class="token punctuation">)</span>
ws<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;第N次写入\\r\\n&#39;</span><span class="token punctuation">)</span>
ws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></li></ul><h5 id="fs-createreadstream-path-流式读取" tabindex="-1"><a class="header-anchor" href="#fs-createreadstream-path-流式读取"><span>fs.createReadStream(path)：流式读取</span></a></h5><ul><li><p><strong>参数说明</strong>：path:文件路径</p></li><li><p><strong>作用</strong>：创建流式读取对象 减少文件操作次数</p></li><li><p><strong>实例</strong>：</p><pre><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> rs <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;./流式读取.txt&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> ws <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&#39;./流式写入.txt&#39;</span><span class="token punctuation">)</span>
rs<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chunk<span class="token punctuation">,</span> <span class="token string">&#39;读取的数据块大致64kb&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

rs<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>ws<span class="token punctuation">)</span>   <span class="token comment">// 快速复制rs读取的文件</span>
</code></pre></li></ul><h5 id="fs-rename-oldpath-newpath-cbk-obj-异步重命名移动-fs-renamesync-oldpath-newpath-同步重命名移动" tabindex="-1"><a class="header-anchor" href="#fs-rename-oldpath-newpath-cbk-obj-异步重命名移动-fs-renamesync-oldpath-newpath-同步重命名移动"><span>fs.rename(oldPath,newPath,cbk(obj)) :异步重命名移动 | fs.renameSync(oldPath,newPath) :同步重命名移动</span></a></h5><ul><li><p><strong>参数说明</strong>：oldPath：旧文件路径 newPath:新文件路径 cbk(obj) 回调根据obj判断是否成功</p></li><li><p><strong>作用</strong>：重命名文件和移动文件</p></li><li><p><strong>实例</strong>：</p><pre><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token string">&#39;./同步写入.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./异步重命名.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;错误&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">renameSync</span><span class="token punctuation">(</span><span class="token string">&#39;./同步写入.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./同步重命名.txt&#39;</span><span class="token punctuation">)</span>
</code></pre></li></ul><h5 id="fs-unlink-path-cbk-obj-fs-rm-path-cbk-obj-异步删除文件-fs-unlinksync-path-fs-rm-path-同步删除文件" tabindex="-1"><a class="header-anchor" href="#fs-unlink-path-cbk-obj-fs-rm-path-cbk-obj-异步删除文件-fs-unlinksync-path-fs-rm-path-同步删除文件"><span>fs.unlink(path,cbk(obj)) ;fs.rm(path,cbk(obj)) 异步删除文件 | fs.unlinkSync(path) ;fs.rm(path): 同步删除文件</span></a></h5><ul><li><p><strong>参数说明</strong>：path: 文件路径</p></li><li><p><strong>作用</strong>：删除文件</p></li><li><p><strong>实例</strong>：</p><pre><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">&#39;66666.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;错误&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
fs<span class="token punctuation">.</span><span class="token function">unlinkSync</span><span class="token punctuation">(</span><span class="token string">&#39;66666.txt&#39;</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">rm</span><span class="token punctuation">(</span><span class="token string">&#39;66666.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;错误&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">rmSync</span><span class="token punctuation">(</span><span class="token string">&#39;66666.txt&#39;</span><span class="token punctuation">)</span>
</code></pre></li></ul><h5 id="fs-mkdir-path-cbk-obj-异步创建文件夹-fs-mkdirsync-path-同步创建文件夹" tabindex="-1"><a class="header-anchor" href="#fs-mkdir-path-cbk-obj-异步创建文件夹-fs-mkdirsync-path-同步创建文件夹"><span>fs.mkdir(path,cbk(obj))：异步创建文件夹| fs.mkdirSync(path)：同步创建文件夹</span></a></h5><ul><li><p><strong>参数说明</strong>：path:文件夹路径</p></li><li><p><strong>作用</strong>：创建文件夹</p></li><li><p><strong>实例</strong>：</p><pre><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">&#39;./新建文件夹/多层级递归删除recursive属性&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">recursive</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;错误&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">mkdirSync</span><span class="token punctuation">(</span><span class="token string">&#39;./同步新增文件夹&#39;</span><span class="token punctuation">)</span>
</code></pre></li></ul><h5 id="fs-readdir-path-cbk-obj-data-异步读取文件夹-fs-readdirsync-path-同步读取文件夹" tabindex="-1"><a class="header-anchor" href="#fs-readdir-path-cbk-obj-data-异步读取文件夹-fs-readdirsync-path-同步读取文件夹"><span>fs.readdir(path,cbk(obj,data))：异步读取文件夹| fs.readdirSync(path)：同步读取文件夹</span></a></h5><ul><li><p><strong>参数说明</strong>：path:文件夹路径，data:文件数据</p></li><li><p><strong>作用</strong>：创建文件夹</p></li><li><p><strong>实例</strong>：</p><pre><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span><span class="token string">&#39;./&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;错误&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;数据&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span><span class="token string">&#39;./&#39;</span><span class="token punctuation">)</span>
</code></pre></li></ul><h5 id="fs-rmdir-path-opt-recursive-true-cbk-obj-异步删除文件夹-fs-rmdirsync-path-同步删除文件夹" tabindex="-1"><a class="header-anchor" href="#fs-rmdir-path-opt-recursive-true-cbk-obj-异步删除文件夹-fs-rmdirsync-path-同步删除文件夹"><span>fs.rmdir(path, opt&lt;{ recursive: true } &gt;,cbk(obj))：异步删除文件夹| fs.rmdirSync(path)：同步删除文件夹</span></a></h5><ul><li><p><strong>参数说明</strong>：path:文件夹路径</p></li><li><p><strong>作用</strong>：删除文件夹</p></li><li><p><strong>实例</strong>：</p><pre><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">rmdir</span><span class="token punctuation">(</span><span class="token string">&#39;./新建文件夹/多层级递归删除recursive属性&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;错误&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span> 
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
fs<span class="token punctuation">.</span><span class="token function">rmdirSync</span><span class="token punctuation">(</span><span class="token string">&#39;./新建文件夹&#39;</span><span class="token punctuation">)</span>
</code></pre></li></ul><h5 id="fs-stat-path-cbk-obj-data-异步获取文件状态-fs-stat-path-同步获取文件状态" tabindex="-1"><a class="header-anchor" href="#fs-stat-path-cbk-obj-data-异步获取文件状态-fs-stat-path-同步获取文件状态"><span>fs.stat(path,cbk(obj,data))：异步获取文件状态 | fs.stat(path)：同步获取文件状态</span></a></h5><ul><li><p><strong>参数说明</strong>：path:文件夹路径，data：状态数据</p></li><li><p><strong>作用</strong>：获取文件状态</p></li><li><p><strong>实例</strong>：</p><pre><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span><span class="token string">&#39;./新建文件夹&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;错误&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">statSync</span><span class="token punctuation">(</span><span class="token string">&#39;./新建文件夹&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre></li></ul><h5 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h5>`,26),c=[o];function e(l,u){return s(),a("div",null,c)}const k=n(p,[["render",e],["__file","fsmokuai.html.vue"]]),r=JSON.parse('{"path":"/blogs/Node/fsmokuai.html","title":"fs模块","lang":"en-US","frontmatter":{"title":"fs模块","date":"2023-01-06T00:00:00.000Z","tags":["NodeJS"],"categories":["Node"]},"headers":[{"level":3,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":3,"title":"方法","slug":"方法","link":"#方法","children":[]}],"git":{"createdTime":1717677053000,"updatedTime":1717677053000,"contributors":[{"name":"wkq","email":"444296534@qq.com","commits":1}]},"filePathRelative":"blogs/Node/fs模块.md"}');export{k as comp,r as data};
